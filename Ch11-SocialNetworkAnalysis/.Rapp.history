head(submission)
write.csv(submission, '/Users/admin/Documents/DSCompetitions/Kaggle-Titanic/version3/submission/logitWithLasso.csv', row.names = FALSE)
library(cvTools)
install.packages('cvTools')
library(cvTools)
library(Metrics)
methods(Metrics)
ls(getNamespace('Metrics'), all.names = TRUE)
ce(0, 1)
ce(1, 0)
ce(0, 0)
ce(1, 1)
yp <- sample(0:2,50,replace=TRUE)
yt <- sample(0:2,50,replace=TRUE)
ce(yp, yt)
ll(yp, yt)
mae(yp, yt)
mse(yp, yt)
rmse(yp, yt)
cor(1, 1)
cor(x=c(1, 1, 1), y=c(1, 1, 1))
cor(x=c(1, 1, 1), y=c(1, 1, 2))
cor(x=c(1, 1, 3), y=c(1, 1, 2))
cor(x=c(1, 1, 2), y=c(1, 1, 2))
cor(x=c(1, 1, 2), y=c(2, 1, 1))
install.packages('akima')
install.packages(c('chron', 'lme4'))
install.packages(c('mcmc', 'odesolve', 'spdep', 'spastat', 'tree'))
library(MASS)
attach(bacteria)
str(bacteria)
head(bacteria)
fix(bacteria)
objects()
search()
library(help = cvTools)
library(help=xgBoost)
library(xgBoost)
library(help = xgboost)
library(xgboost)
library(help = xgboost)
exp(-1)
exp(1)
exp(-100000000)
exp(100000000)
library(twitteR)
library(ROAuth)
library(RCurl)#
library(RJSONIO)#
library(igraph)
library(twitteR)#
library(ROAuth)
9gSseVvJXuEfSsDm3HuuizmMn
JYkSgJeHjMlPxIU8k5A2BChNGb7x75R6t6Fm1VeNjSuZiYtTem
2560297818-X7lIinJeC3EUlkSNPmCuDvXgNqgqny5xGs5etlg
3YDvFeFHisRxQMMO1jydUkzCIsix7LDYtWPf35PZcFSn9
#libraries to extract twitter data#
library(twitteR)#
library(ROAuth)#
#
#libraries to parse data and plot network graph#
library(RCurl)#
library(RJSONIO)#
library(igraph)#
#
#set required keys to access Twitter data#
consumer_key <- '9gSseVvJXuEfSsDm3HuuizmMn'#
consumer_secret <- 'JYkSgJeHjMlPxIU8k5A2BChNGb7x75R6t6Fm1VeNjSuZiYtTem'#
access_token <- '2560297818-X7lIinJeC3EUlkSNPmCuDvXgNqgqny5xGs5etlg'#
access_secret <- '3YDvFeFHisRxQMMO1jydUkzCIsix7LDYtWPf35PZcFSn9'#
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
api.get <- searchTwitter('drewconway', n = 25)
api.get
getUser('drewconway')
user <- getUser('drewconway')
str(user)
user.getURL()
user$getURL()
getURL(user)
getDescription('drewconway')
getDescription(user)
user$getDescription()
user$getUrl()
user$getFollowers()
user$getFriends()
user <- getUser('RobynCaplan')
#libraries to extract twitter data#
library(twitteR)#
library(ROAuth)#
#
#libraries to parse data and plot network graph#
library(RCurl)#
library(RJSONIO)#
library(igraph)#
#
#set required keys to access Twitter data#
consumer_key <- '9gSseVvJXuEfSsDm3HuuizmMn'#
consumer_secret <- 'JYkSgJeHjMlPxIU8k5A2BChNGb7x75R6t6Fm1VeNjSuZiYtTem'#
access_token <- '2560297818-X7lIinJeC3EUlkSNPmCuDvXgNqgqny5xGs5etlg'#
access_secret <- '3YDvFeFHisRxQMMO1jydUkzCIsix7LDYtWPf35PZcFSn9'#
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
####Refer to code at the following URL: http://www.nyu.edu/projects/politicsdatalab/localdata/workshops/twitter.pdf#
#libraries to extract twitter data#
library(twitteR)#
library(ROAuth)#
#
#libraries to parse data and plot network graph#
library(RCurl)#
library(RJSONIO)#
library(igraph)
#set required keys to access Twitter data#
consumer_key <- '9gSseVvJXuEfSsDm3HuuizmMn'#
consumer_secret <- 'JYkSgJeHjMlPxIU8k5A2BChNGb7x75R6t6Fm1VeNjSuZiYtTem'#
access_token <- '2560297818-X7lIinJeC3EUlkSNPmCuDvXgNqgqny5xGs5etlg'#
access_secret <- '3YDvFeFHisRxQMMO1jydUkzCIsix7LDYtWPf35PZcFSn9'
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)
#function to create edge matrix given a seed user. Edge list is a list of matrices where each matrix has two columns: friends, whom the user is following and followers who are following the user. This function will create edge matrix for a given user#
#
edge.mat <- function(username){#
	user <- getUser(username)#
#
	#get screen names of all the twitter friends user has and convert 	it into character vector. This would be the source column of our 	edge list matrix#
	friends <- user$getFriends()#
	friends.screen.names <- as.character(lapply(friends, function(f) 	f$getScreenName()))#
#
	#get screen names of all the twitter followers user has and 		convert it into character vector. This would be the target column 	of our edge list matrix#
	followers <- user$getFollowers()#
	followers.screen.names <- as.character(lapply(followers, 			function(f) f$getScreenName()))#
	#create edge matrix#
	edge.mat <- cbind(friends.screen.name,followers.screen.name)#
	return(edge.mat)	#
}
edge.mat('datascientist17')
edge.mat <- function(username){#
	user <- getUser(username)#
#
	#get screen names of all the twitter friends user has and convert 	it into character vector. This would be the source column of our 	edge list matrix#
	friends <- user$getFriends()#
	friends.screen.names <- as.character(lapply(friends, function(f) 	f$getScreenName()))#
#
	#get screen names of all the twitter followers user has and 		convert it into character vector. This would be the target column 	of our edge list matrix#
	followers <- user$getFollowers()#
	followers.screen.names <- as.character(lapply(followers, 			function(f) f$getScreenName()))#
	#create edge matrix#
	edge.mat <- cbind(friends.screen.names, followers.screen.names)#
	return(edge.mat)	#
}
edge.mat('datascientist17')
user <- getUser('datascientist17')
user$getFollowers()
len(user$getFollowers())
length(user$getFollowers())
length(user$getFriends())
friends <- c('a', 'b', 'c')
dummy <- integer(length(friends))
dummy
cbind(friends, dummy)
edge.mat <- function(username){#
	user <- getUser(username)#
#
	#get screen names of all the twitter friends user has and convert it into character vector. This would be the source column of our 	edge list matrix#
	friends <- user$getFriends()#
	friends.screen.names <- as.character(lapply(friends, function(f) 	f$getScreenName()))#
#
	#get screen names of all the twitter followers user has and 	convert it into character vector. This would be the target column 	of our edge list matrix#
	followers <- user$getFollowers()#
	followers.screen.names <- as.character(lapply(followers, 			function(f) f$getScreenName()))#
	#before combining friends and followers into a matrix, check if number of friends or followers is 0. If it is, replace friends or followers vectors by vector of all 0s#
	if(length(friends.screen.names) == 0){#
		friends.screen.names <- integer(length(followers.screen,names))#
	}#
	if(length(followers.screen.names) == 0){#
		followers.screen.names <- integer(length(friends.screen.names))#
	}#
	if(length(followers.screen.names) == 0 & length(friends.screen.names) == 0){#
		followers.screen.names <- integer(0)#
		friends.screen.names <- integer(0)#
	}#
	#create edge matrix#
	edge.mat <- cbind(friends.screen.names, followers.screen.names)#
	return(edge.mat)	#
}
edge.mat('datascientist17')
getUser('0')
edge.mat <- function(username){#
	user <- getUser(username)#
#
	#get screen names of all the twitter friends user has and convert it into character vector. This would be the source column of our 	edge list matrix#
	friends <- user$getFriends()#
	friends.screen.names <- as.character(lapply(friends, function(f) 	f$getScreenName()))#
#
	#get screen names of all the twitter followers user has and 	convert it into character vector. This would be the target column 	of our edge list matrix#
	followers <- user$getFollowers()#
	followers.screen.names <- as.character(lapply(followers, 			function(f) f$getScreenName()))#
	#before combining friends and followers into a matrix, check if number of friends or followers is 0. If it is, replace friends or followers vectors by vector of all 0s#
	if(length(friends.screen.names) == 0){#
		friends.screen.names <- integer(length(followers.screen,names))#
	}#
	if(length(followers.screen.names) == 0){#
		followers.screen.names <- integer(length(friends.screen.names))#
	}#
	if(length(followers.screen.names) == 0 & length(friends.screen.names) == 0){#
		followers.screen.names <- integer(0)#
		friends.screen.names <- integer(0)#
	}#
	#create edge matrix#
	edge.mat <- cbind(friends.screen.names, followers.screen.names)#
	colnames(edge.mat) <- c('friends', 'followers')#
	return(edge.mat)	#
}
edge.mat('datascientist17')
mat <- edge.mat('datascientist17')
mat
unique(c(mat[, 1], mat[, 2]))
new.seed <- unique(c(mat[, 1], mat[, 2]))
new.seed[new.seed != '0']
get.seed <- function(edge.mat, seed){#
	#there is possibility to have a user as your friend and follower on twitter. In that case, we only want to extract one username and avoid dups#
	new.seed <- unique(c(edge.mat[, 1], edge.mat[, 2]))#
	#since we can potentially have 0s in our friends and / or followers columns, make sure to remove them#
	new.seed <- new.seed[new.seed != '0']#
	#finally, make sure that the original seed user is not in the new.seed vector#
	new.seed <- new.seed[new.seed != seed]#
	return(new.seed)#
}
mat
get.seed(mat, 'datascientist17')
dim(mat)
dim(mat)[2]
#Implement snowball sampling for a given seed user. #
twitter.snowball <- function(seed, k = 2){#
	#get edge matrix for given seed user#
	seed.em <- edge.mat(seed)#
	#get new seeds from the original seed users friends and followers to be used in next round of snowball#
	new.seeds <- get.seed(seed.em, seed)#
	#keep a count of rounds completed#
	round <- 1#
	#keep a record of all the users / nodes that are already hit#
	all.nodes <- seed#
	#begin the snowball search #
	while(rounds < k){#
		next.seeds <- c()#
		for (user in new.seeds){#
			#get user information only if we have already not extracted their information in earlier round(s)#
			if (!user %in% all.nodes) {#
				#get user's edge matrix#
				user.em <- edge.matrix(user)#
				#make sure that followers exist #
				if (dim(user.em)[2] > 0){#
					#combine user.em and seed.em#
					seed.em <- rbind(seed.em, user.em)#
					#compute newer seeds and add them to orinal vector of new seeds#
					next.seeds <- c(next.seeds, get.seed(user.em, user))#
					#add user to vector of all nodes#
					all.nodes <- c(all.nodes, user)#
				}#
			}#
		}#
		#remove dups from next seeds vector#
		new.seeds <- unique(next.seeds)#
		#remove any entries that already exist in all.nodes#
		new.seeds <- new.seeds[!which(new.seeds %in% all.nodes)]#
		#increment round counter#
		rounds <- rounds + 1#
	}#
	#remove any possible dups from seed.em#
	seed.em <- seed.em[!duplicated(seed.em), ]#
	return(graph.edgelist(seed.em))#
}
twitter.snowball('datascientist17')
twitter.snowball <- function(seed, k = 2){#
	#get edge matrix for given seed user#
	seed.em <- edge.mat(seed)#
	#get new seeds from the original seed users friends and followers to be used in next round of snowball#
	new.seeds <- get.seed(seed.em, seed)#
	#keep a count of rounds completed#
	rounds <- 1#
	#keep a record of all the users / nodes that are already hit#
	all.nodes <- seed#
	#begin the snowball search #
	while(rounds < k){#
		next.seeds <- c()#
		for (user in new.seeds){#
			#get user information only if we have already not extracted their information in earlier round(s)#
			if (!user %in% all.nodes) {#
				#get user's edge matrix#
				user.em <- edge.matrix(user)#
				#make sure that followers exist #
				if (dim(user.em)[2] > 0){#
					#combine user.em and seed.em#
					seed.em <- rbind(seed.em, user.em)#
					#compute newer seeds and add them to orinal vector of new seeds#
					next.seeds <- c(next.seeds, get.seed(user.em, user))#
					#add user to vector of all nodes#
					all.nodes <- c(all.nodes, user)#
				}#
			}#
		}#
		#remove dups from next seeds vector#
		new.seeds <- unique(next.seeds)#
		#remove any entries that already exist in all.nodes#
		new.seeds <- new.seeds[!which(new.seeds %in% all.nodes)]#
		#increment round counter#
		rounds <- rounds + 1#
	}#
	#remove any possible dups from seed.em#
	seed.em <- seed.em[!duplicated(seed.em), ]#
	return(graph.edgelist(seed.em))#
}
twitter.snowball('datascientist17')
#Implement snowball sampling for a given seed user. #
twitter.snowball <- function(seed, k = 2){#
	#get edge matrix for given seed user#
	seed.em <- edge.mat(seed)#
	#get new seeds from the original seed users friends and followers to be used in next round of snowball#
	new.seeds <- get.seed(seed.em, seed)#
	#keep a count of rounds completed#
	rounds <- 1#
	#keep a record of all the users / nodes that are already hit#
	all.nodes <- seed#
	#begin the snowball search #
	while(rounds < k){#
		next.seeds <- c()#
		for (user in new.seeds){#
			#get user information only if we have already not extracted their information in earlier round(s)#
			if (!user %in% all.nodes) {#
				#get user's edge matrix#
				user.em <- edge.mats(user)#
				#make sure that followers exist #
				if (dim(user.em)[2] > 0){#
					#combine user.em and seed.em#
					seed.em <- rbind(seed.em, user.em)#
					#compute newer seeds and add them to orinal vector of new seeds#
					next.seeds <- c(next.seeds, get.seed(user.em, user))#
					#add user to vector of all nodes#
					all.nodes <- c(all.nodes, user)#
				}#
			}#
		}#
		#remove dups from next seeds vector#
		new.seeds <- unique(next.seeds)#
		#remove any entries that already exist in all.nodes#
		new.seeds <- new.seeds[!which(new.seeds %in% all.nodes)]#
		#increment round counter#
		rounds <- rounds + 1#
	}#
	#remove any possible dups from seed.em#
	seed.em <- seed.em[!duplicated(seed.em), ]#
	return(graph.edgelist(seed.em))#
}
twitter.snowball('datascientist17')
#Implement snowball sampling for a given seed user. #
twitter.snowball <- function(seed, k = 2){#
	#get edge matrix for given seed user#
	seed.em <- edge.mat(seed)#
	#get new seeds from the original seed users friends and followers to be used in next round of snowball#
	new.seeds <- get.seed(seed.em, seed)#
	#keep a count of rounds completed#
	rounds <- 1#
	#keep a record of all the users / nodes that are already hit#
	all.nodes <- seed#
	#begin the snowball search #
	while(rounds < k){#
		next.seeds <- c()#
		for (user in new.seeds){#
			#get user information only if we have already not extracted their information in earlier round(s)#
			if (!user %in% all.nodes) {#
				#get user's edge matrix#
				user.em <- edge.mat(user)#
				#make sure that followers exist #
				if (dim(user.em)[2] > 0){#
					#combine user.em and seed.em#
					seed.em <- rbind(seed.em, user.em)#
					#compute newer seeds and add them to orinal vector of new seeds#
					next.seeds <- c(next.seeds, get.seed(user.em, user))#
					#add user to vector of all nodes#
					all.nodes <- c(all.nodes, user)#
				}#
			}#
		}#
		#remove dups from next seeds vector#
		new.seeds <- unique(next.seeds)#
		#remove any entries that already exist in all.nodes#
		new.seeds <- new.seeds[!which(new.seeds %in% all.nodes)]#
		#increment round counter#
		rounds <- rounds + 1#
	}#
	#remove any possible dups from seed.em#
	seed.em <- seed.em[!duplicated(seed.em), ]#
	return(graph.edgelist(seed.em))#
}
twitter.snowball('datascientist17')
user <- 'johnmyleswhite'
source('snowballSamplingCode.R')
getwd()
setwd('/Users/admin/Documents/GitHubCode/MLForHackersCode/Ch11-SocialNetworkAnalysis')
getwd()
source('snowballSamplingCode.R')
library(igraph)
user <- 'johnmyleswhite'
user.net <- supressWarnings(read.graph(paste('data/', user, '/', user, '_net.graphml', sep = ''), format = 'graphml'))
user.net <-read.graph(paste('data/', user, '/', user, '_net.graphml', sep = ''), format = 'graphml')
?graph.edgelist
graph <- twitter.snowball('johnmyleswhite')
####Refer to code at the following URL: http://www.nyu.edu/projects/politicsdatalab/localdata/workshops/twitter.pdf#
#libraries to extract twitter data#
library(twitteR)#
library(ROAuth)#
#
#libraries to parse data and plot network graph#
library(RCurl)#
library(RJSONIO)#
library(igraph)#
#
#set required keys to access Twitter data#
consumer_key <- '9gSseVvJXuEfSsDm3HuuizmMn'#
consumer_secret <- 'JYkSgJeHjMlPxIU8k5A2BChNGb7x75R6t6Fm1VeNjSuZiYtTem'#
access_token <- '2560297818-X7lIinJeC3EUlkSNPmCuDvXgNqgqny5xGs5etlg'#
access_secret <- '3YDvFeFHisRxQMMO1jydUkzCIsix7LDYtWPf35PZcFSn9'#
setup_twitter_oauth(consumer_key, consumer_secret, access_token, access_secret)#
#
#function to create edge matrix given a seed user. Edge list is a list of matrices where each matrix has two columns: friends, whom the user is following and followers who are following the user. This function will create edge matrix for a given user#
#
edge.mat <- function(username){#
	user <- getUser(username)#
#
	#get screen names of all the twitter friends user has and convert it into character vector. This would be the source column of our 	edge list matrix#
	friends <- user$getFriends()#
	friends.screen.names <- as.character(lapply(friends, function(f) 	f$getScreenName()))#
#
	#get screen names of all the twitter followers user has and 	convert it into character vector. This would be the target column 	of our edge list matrix#
	followers <- user$getFollowers()#
	followers.screen.names <- as.character(lapply(followers, 			function(f) f$getScreenName()))#
	#before combining friends and followers into a matrix, check if number of friends or followers is 0. If it is, replace friends or followers vectors by vector of all 0s#
	if(length(friends.screen.names) == 0){#
		friends.screen.names <- integer(length(followers.screen.names))#
	}#
	if(length(followers.screen.names) == 0){#
		followers.screen.names <- integer(length(friends.screen.names))#
	}#
	if(length(followers.screen.names) == 0 & length(friends.screen.names) == 0){#
		followers.screen.names <- integer(0)#
		friends.screen.names <- integer(0)#
	}#
	#create edge matrix#
	edge.mat <- cbind(friends.screen.names, followers.screen.names)#
	colnames(edge.mat) <- c('friends', 'followers')#
	return(edge.mat)	#
}#
#
#The above function gives us edge matrix which has friends and followers of a given user. From these columns, we want to find other potential seed users to implement snowball sampling. #
get.seed <- function(edge.matrix, seed){#
	#there is possibility to have a user as your friend and follower on twitter. In that case, we only want to extract one username and avoid dups#
	new.seed <- unique(c(edge.mat[, 1], edge.mat[, 2]))#
	#since we can potentially have 0s in our friends and / or followers columns, make sure to remove them#
	new.seed <- new.seed[new.seed != '0']#
	#finally, make sure that the original seed user is not in the new.seed vector#
	new.seed <- new.seed[new.seed != seed]#
	return(new.seed)#
}#
#
#Implement snowball sampling for a given seed user. #
twitter.snowball <- function(seed, k = 2){#
	#get edge matrix for given seed user#
	seed.em <- edge.mat(seed)#
	#get new seeds from the original seed users friends and followers to be used in next round of snowball#
	new.seeds <- get.seed(seed.em, seed)#
	#keep a count of rounds completed#
	rounds <- 1#
	#keep a record of all the users / nodes that are already hit#
	all.nodes <- seed#
	#begin the snowball search #
	while(rounds < k){#
		next.seeds <- c()#
		for (user in new.seeds){#
			#get user information only if we have already not extracted their information in earlier round(s)#
			if (!user %in% all.nodes) {#
				#get user's edge matrix#
				user.em <- edge.mat(user)#
				#make sure that followers exist #
				if (dim(user.em)[2] > 0){#
					#combine user.em and seed.em#
					seed.em <- rbind(seed.em, user.em)#
					#compute newer seeds and add them to orinal vector of new seeds#
					next.seeds <- c(next.seeds, get.seed(user.em, user))#
					#add user to vector of all nodes#
					all.nodes <- c(all.nodes, user)#
				}#
			}#
		}#
		#remove dups from next seeds vector#
		new.seeds <- unique(next.seeds)#
		#remove any entries that already exist in all.nodes#
		new.seeds <- new.seeds[!which(new.seeds %in% all.nodes)]#
		#increment round counter#
		rounds <- rounds + 1#
	}#
	#remove any possible dups from seed.em#
	seed.em <- seed.em[!duplicated(seed.em), ]#
	return(graph.edgelist(seed.em))#
}
graph <- twitter.snowball('johnmyleswhite')
warnings()
user.net <- read.graph(paste('data/', user, '/', user, '_net.graphml', sep = ''), format = 'graphml')
user <- 'johnmyleswhite'
user.net <- read.graph(paste('data/', user, '/', user, '_net.graphml', sep = ''), format = 'graphml')
getwd()
library(igraph)
source('snowballSamplingCode.R')
user <- 'johnmyleswhite'
user.net <- read.graph(paste('data/', user, '/', user, '_net.graphml', sep = ''), format = 'graphml')
paste('data/', user, '/', user, '_net.graphml', sep = ''
)
user.net <- read.graph(paste('/data/', user, '/', user, '_net.graphml', sep = ''), format = 'graphml')
ls()
user.net <- read.graph(paste('~/data/', user, '/', user, '_net.graphml', sep = ''), format = 'graphml')
user.net <- read.graph(paste('/data/', '/', user, '_net.graphml', sep = ''), format = 'graphml')
paste('/data/', '/', user, '_net.graphml', sep = '')
user.net <- read.graph(paste('/data/', user, '_net.graphml', sep = ''), format = 'graphml')
user.net <- read.graph(paste('data/', user, '_net.graphml', sep = ''), format = 'graphml')
paste('data/', user, '_net.graphml', sep = '')
user.net <- read.graph(paste('data/', user, '_net.graphml', sep = ''), format = 'graphml')
user.net <- read.graph(paste('data/', user, '_net.graphml', sep = ''), format = 'graphml')
user.net <- set.vertex(user.net, 'Label', value = get.vertex.attribute(user.net, 'name'))
getwd()#
setwd('/Users/admin/Documents/GitHubCode/MLForHackersCode/Ch11-SocialNetworkAnalysis/data/johnmyleswhite')#
getwd()#
#
library(igraph)#
source('snowballSamplingCode.R')
user <- 'johnmyleswhite'#
#
user.net <- read.graph(paste('data/', user, '_net.graphml', sep = ''), format = 'graphml')
user.net <- set.vertex.attribute(user.net, 'Label', value = get.vertex.attribute(user.net, 'name'))
user.cores <- graph.coreness(user.net, mode = 'in')
user.clean <- subgraph(user.net, (which(user.cores) > 1) - 1)
user.clean <- subgraph(user.net, (which(user.cores > 1) - 1)
)
user.ego <- subgraph(graph = user.net, v = c(neighbors(graph = user.net, v = user, mode = 'out')))
user.clean <- subgraph(user.net, which(user.cores > 1) - 1)
user.cores <- graph.coreness(user.net, mode="in")
user.clean <- subgraph(user.net, which(user.cores>1)-1)
user.clean <- subgraph(user.net, which(user.cores > 1))
user.sp <- shortest.paths(user.ego)
user.hc <- hclust(dist(user.sp))
str(user.sp)
dim(user.sp)
is.na(user.sp)
table(is.na(user.sp))
481 * 481
user.hc <- hclust(dist(user.sp))
str(user.sp)
user.ego <- read.graph(file = 'data/johnmyleswhite_ego.graphml', format = 'graphml')
getwd()
user.ego <- read.graph(file = 'data/johnmyleswhite_ego.graphml', format = 'graphml')
user.sp <- shortest.paths(user.ego)
user.hc <- hclust(dist(user.sp))
user.ego <- subgraph(graph = user.net, v = c(neighbors(graph = user.net, v = user, mode = 'out')))
user.sp <- shortest.paths(user.ego)
user.hc <- hclust(dist(user.sp))
user.ego <- read.graph(file = 'data/johnmyleswhite_ego.graphml', format = 'graphml')
user.sp <- shortest.paths(user.ego)
user.hc <- hclust(dist(user.sp))
plot(user.hc)
user.cluster <- as.character(cutree(user.hc, k = 2))
user.cluster
for (i in 2:10){#
	#create a character vector of cluster assignments for each node in the data#
	user.cluster <- as.character(cutree(user.hc, k = i))#
	#since the fist node is always the seed user, set its cluster assignment to 0#
	user.cluster[0] <- '0'#
	#add cluster assignment information to the nodes#
	user.ego <- set.vertex.attribute(graph = user.cluster, name = paste('HC', i, sep = ''), value = user.cluster)#
}
for (i in 2:10){#
	#create a character vector of cluster assignments for each node in the data#
	user.cluster <- as.character(cutree(user.hc, k = i))#
	#since the fist node is always the seed user, set its cluster assignment to 0#
	user.cluster[0] <- '0'#
	#add cluster assignment information to the nodes#
	user.ego <- set.vertex.attribute(graph = user.ego, name = paste('HC', i, sep = ''), value = user.cluster)#
}
source('snowballSamplingCode.R')
user <- 'drewconway'
user.graph <- read.graph(paste('data/', 'user', '_net.graphml', sep = ''), format = 'graphml')
getwd()
user.graph <- read.graph(paste('data/', user, '_net.graphml', sep = ''), format = 'graphml')
user <- 'johnmyleswhite'
user.graph <- read.graph(paste('data/', user, '_net.graphml', sep = ''), format = 'graphml')
friends <- V(user.graph)$name[neighbors(user.graph, user, model = 'out')]
friends <- V(user.graph)$name[neighbors(user.graph, user, mode = 'out')]
head(friends)
user.el <- get.edgelist(user.graph)
head(user.el)
unique(user.el[, 1])
head(unique(user.el[, 1]))
user.el[1, ]
friends <- V(user.graph)$name[neighbors(user.graph, user, mode = 'out') + 1]
friends <- V(user.graph)$name[neighbors(user.graph, user, mode = 'out')]
head(friends)
table('johnmyleswhite' %in% friends)
str(friends)
sapply(friends, function(f) f == 'johnmyleswhite')
table(sapply(friends, function(f) f == 'johnmyleswhite'))
head(user.el)
#find all users who are not the original seed user and who the seed user is not following, but the seed user's friends are following#
non.friends <- sapply(1:nrow(user.el), function(i) {#
	current user name should not be the seed, seed should not be already following the user and user should be followed by friends of the seed#
	ifelse(any(user.el[i, ] == user | !user.el[i, 1] %in% friends) | user.el[i, 2] %in% friends, FALSE, TRUE)#
})
non.friends <- sapply(1:nrow(user.el), function(i) {#
#	current user name should not be the seed, seed should not be already following the user and user should be followed by friends of the seed#
	ifelse(any(user.el[i, ] == user | !user.el[i, 1] %in% friends) | user.el[i, 2] %in% friends, FALSE, TRUE)#
})
friends.followers <- data.frame(list(Twitter.Users = names(friends.count), Friends.Following = as.numeric(friends.count)), stringsAsFactors = FALSE)
non.friends.el <- user.el[which(non.friends == TRUE)]
friends.count <- table(non.friends.el[, 2])
head(non.friends.el)
non.friends.el <- user.el[which(non.friends == TRUE), ]
friends.count <- table(non.friends.el[, 2])
friends.followers <- data.frame(list(Twitter.Users = names(friends.count), Friends.Following = as.numeric(friends.count)), stringsAsFactors = FALSE)
friends.followers$Friends.Norm <- friends.followers$Friends.Following / length(friends)
friends.followers <- friends.followers[with(friends.followers, order(-Friends.Norm))]
friends.followers <- friends.followers[with(friends.followers, order(-Friends.Norm)), ]
friends.followers[1:10]
friends.followers[1:10, ]
user.ego <- read.graph(paste('data/', user, '_ego.graphml'), format = 'graphml')
getwd()
user
user.ego <- read.graph(paste('data/', user, '_ego.graphml'), format = 'graphml')
paste('data/', user, '_ego.graphml')
user.ego <- read.graph(paste0('data/', user, '_ego.graphml'), format = 'graphml')
friends.partitions <- cbind(V(user.ego)$HC8, V(user.ego)$name)
head(friends.partitions)
head(friends.partitions)
head(non.friends.el)
partition.follows <- function(i){#
	#extract all friends for a given partition number#
	friends.in <- friends.partitions[which(friends.partitions[, 1] == i), 2]#
	#find those friends within the partition that the seed user is not following currently#
	partition.non.follow <- non.friends.el[which(!is.na(match(non.friends.el[, 1], friends.in)))]#
	#if no match is found, return NA#
	if(nrow(partition.non.follow) < 2){#
		return(c(i, NA))#
	}#
	#else, return user followed the most in the current partition#
	else{#
		#get number of followers of each user in parition.non.follow#
		partition.fav <- table(partition.non.follow[, 2])#
		#re-order from most popular to least popular#
		partition.fav <- partition.fav[order(-partition.fav)]#
		#return name of most popular user#
		return(c(i, names(partition.fav)[1]))#
	}	#
}
partition.recs <- t(sapply(unique(friends.partitions[, 1]), partition.follows))
#function to recommend a potential friend to follow based on partition and number of friends of the seed that follow the potential friend within that partition#
partition.follows <- function(i){#
	#extract all friends for a given partition number#
	friends.in <- friends.partitions[which(friends.partitions[, 1] == i), 2]#
	#find those friends within the partition that the seed user is not following currently#
	partition.non.follow <- non.friends.el[which(!is.na(match(non.friends.el[, 1], friends.in)))]#
	#if no match is found, return NA#
	if(nrow(partition.non.follow) < 2){#
		return(c(i, NA))#
	}#
	#else, return user followed the most in the current partition#
	else{#
		#get number of followers of each user in parition.non.follow#
		partition.fav <- table(partition.non.follow[, 2])#
		#re-order from most popular to least popular#
		partition.fav <- partition.fav[order(-partition.fav)]#
		#return name of most popular user#
		return(c(i, names(partition.fav)[1]))#
	}	#
}
partition.recs <- t(sapply(unique(friends.partitions[, 1]), partition.follows))
#function to recommend a potential friend to follow based on partition and number of friends of the seed that follow the potential friend within that partition#
partition.follows <- function(i){#
	#extract all friends for a given partition number#
	friends.in <- friends.partitions[which(friends.partitions[, 1] == i), 2]#
	#find those friends within the partition that the seed user is not following currently#
	partition.non.follow <- non.friends.el[which(!is.na(match(non.friends.el[, 1], friends.in)))]#
	print(str(partition.non.follow))#
	#if no match is found, return NA#
	if(nrow(partition.non.follow) < 2){#
		return(c(i, NA))#
	}#
	#else, return user followed the most in the current partition#
	else{#
		#get number of followers of each user in parition.non.follow#
		partition.fav <- table(partition.non.follow[, 2])#
		#re-order from most popular to least popular#
		partition.fav <- partition.fav[order(-partition.fav)]#
		#return name of most popular user#
		return(c(i, names(partition.fav)[1]))#
	}	#
}#
#
#apply above function to each partition in our data#
partition.recs <- t(sapply(unique(friends.partitions[, 1]), partition.follows))
character(0)
str(character(0))
nrow(character(0))
length(character(0))
#function to recommend a potential friend to follow based on partition and number of friends of the seed that follow the potential friend within that partition#
partition.follows <- function(i){#
	#extract all friends for a given partition number#
	friends.in <- friends.partitions[which(friends.partitions[, 1] == i), 2]#
	#find those friends within the partition that the seed user is not following currently#
	partition.non.follow <- non.friends.el[which(!is.na(match(non.friends.el[, 1], friends.in))), ]#
	print(str(partition.non.follow))#
	#if no match is found, return NA#
	if(nrow(partition.non.follow) < 2){#
		return(c(i, NA))#
	}#
	#else, return user followed the most in the current partition#
	else{#
		#get number of followers of each user in parition.non.follow#
		partition.fav <- table(partition.non.follow[, 2])#
		#re-order from most popular to least popular#
		partition.fav <- partition.fav[order(-partition.fav)]#
		#return name of most popular user#
		return(c(i, names(partition.fav)[1]))#
	}	#
}#
#
#apply above function to each partition in our data#
partition.recs <- t(sapply(unique(friends.partitions[, 1]), partition.follows))
partition.recs <- partition.recs[!is.na(partition.recs[, 2]) & !duplicated(partition.recs[, 2])]
str(partition.recs)
partition.recs
partition.recs <- partition.recs[!is.na(partition.recs[, 2]) & !duplicated(partition.recs[, 2]), ]
partition.recs <- t(sapply(unique(friends.partitions[, 1]), partition.follows))
#function to recommend a potential friend to follow based on partition and number of friends of the seed that follow the potential friend within that partition#
partition.follows <- function(i){#
	#extract all friends for a given partition number#
	friends.in <- friends.partitions[which(friends.partitions[, 1] == i), 2]#
	#find those friends within the partition that the seed user is not following currently#
	partition.non.follow <- non.friends.el[which(!is.na(match(non.friends.el[, 1], friends.in))), ]#
	#if no match is found, return NA#
	if(nrow(partition.non.follow) < 2){#
		return(c(i, NA))#
	}#
	#else, return user followed the most in the current partition#
	else{#
		#get number of followers of each user in parition.non.follow#
		partition.fav <- table(partition.non.follow[, 2])#
		#re-order from most popular to least popular#
		partition.fav <- partition.fav[order(-partition.fav)]#
		#return name of most popular user#
		return(c(i, names(partition.fav)[1]))#
	}	#
}
partition.recs <- t(sapply(unique(friends.partitions[, 1]), partition.follows))
str(partition.recs)
partition.recs
partition.recs <- partition.recs[!is.na(partition.recs[, 2]) & !duplicated(partition.recs[, 2]), ]
partition.recs
